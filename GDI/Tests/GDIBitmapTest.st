"
	Copyright (c) 2021 Aucerna.
	See (MIT) license in root directory.
"

Class {
	#name : #GDIBitmapTest,
	#superclass : #TestCase,
	#category : #GDI
}

{ #category : #all }
GDIBitmapTest >> testAsDisable [
	| bitmap i disabled |
	VirtualScreen current bitsPerPixel < 24 ifTrue: [^self].
	bitmap := GDIBitmap extent: 7 @ 8.
	i := 0.
	bitmap colorsReplace: [:color | 
		i := i + 3.
		Color red: i green: i + 1 blue: i + 2].
	disabled := bitmap asDisabled.
	disabled bitmap pointsDo: [:point | | original modified |
		original := bitmap colorAt: point.
		modified := disabled colorAt: point.
		self assert: original blendWithButtonFace = modified]]

{ #category : #'bitmap pool' }
GDIBitmapTest >> testBitmapPool [
	| filename pool rectangle copy |
	filename := Directory scratchDir filename \ 'test'.
	pool := BitmapPool fromFilename: filename.
	rectangle := 100 @ 100 extent: 32.
	copy := GDIBitmap fromScreen: rectangle.
	copy useAlphaChannel.
	copy name: 'screen'.
	pool add: copy.
	pool fileOut.
	[| pool2 copy2 |
		self assert: pool filename fileExists.
		pool2 := BitmapPool fromFilename: filename.
		pool2 fileIn.
		copy2 := pool2 bitmapNamed: 'screen'.
		self
			assert: copy2 hasAlphaChannel;
			assert: copy2 extent = copy extent]
		ensure: [pool filename asFile remove]]

{ #category : #all }
GDIBitmapTest >> testColorAt [
	| bmp24 i color bmp32 color1 color2 bmp |
	VirtualScreen current bitsPerPixel < 24 ifTrue: [^self].
	bmp24 := GDIBitmap width: 7 height: 8 bitCount: 24.
	i := 0.
	bmp24 usePrivateDC.
	bmp24 bitmap pointsDo: [:point | 
		color := Color red: i green: i + 1 blue: i + 2.
		bmp24 deviceContext setPixel: point color: color.
		i := i + 3].
	bmp := bmp24 bitmap.
	i := 0.
	bmp pointsDo: [:point | 
		color := Color red: i green: i + 1 blue: i + 2.
		color1 := bmp colorAt: point.
		color2 := bmp24 colorAt: point.
		self assert: color = color1.
		self assert: color = color2.
		self assert: color red = i.
		self assert: color green = (i + 1).
		self assert: color blue = (i + 2).
		i := i + 3].
	"			
"
	bmp32 := GDIBitmap width: 7 height: 8 bitCount: 32.
	bmp32 usePrivateDC.
	i := 0.
	bmp32 bitmap pointsDo: [:point | 
		color := Color red: i green: i + 1 blue: i + 2.
		bmp32 deviceContext setPixel: point color: color.
		i := i + 3].
	bmp := bmp32 bitmap.
	i := 0.
	bmp pointsDo: [:point | 
		color := Color red: i green: i + 1 blue: i + 2.
		color1 := bmp colorAt: point.
		color2 := bmp24 colorAt: point.
		self assert: color = color1.
		self assert: color = color2.
		self assert: color red = i.
		self assert: color green = (i + 1).
		self assert: color blue = (i + 2).
		i := i + 3]]

{ #category : #all }
GDIBitmapTest >> testColorAtPut [
	| bmp24 i color colorGeting bmp32 |
	VirtualScreen current bitsPerPixel < 24 ifTrue: [^self].
	bmp24 := GDIBitmap width: 7 height: 8 bitCount: 24.
	i := 0.
	bmp24 apply: [:bmp | 
		bmp pointsDo: [:point | 
			color := Color red: i green: i + 1 blue: i + 2.
			bmp colorAt: point put: color.
			colorGeting := bmp colorAt: point.
			self assert: color = colorGeting.
			self assert: color red = i.
			self assert: color green = (i + 1).
			self assert: color blue = (i + 2)]].
	"			
"
	bmp32 := GDIBitmap width: 7 height: 8 bitCount: 32.
	i := 0.
	bmp32 apply: [:bmp | 
		bmp pointsDo: [:point | 
			color := Color red: i green: i + 1 blue: i + 2.
			bmp colorAt: point put: color.
			colorGeting := bmp colorAt: point.
			self assert: color = colorGeting.
			self assert: color red = i.
			self assert: color green = (i + 1).
			self assert: color blue = (i + 2).
			i := i + 3]]]

{ #category : #all }
GDIBitmapTest >> testFlippedHorizontallyAndVertical [
	| bmp i color flipHorizontalBmp width colorFlipped flipVerticalBmp height |
	VirtualScreen current bitsPerPixel < 24 ifTrue: [^self].
	bmp := GDIBitmap extent: 7 @ 8.
	bmp apply: [:map | 
		i := 0.
		map pointsDo: [:point | 
			color := Color red: i green: i + 1 blue: i + 2.
			map colorAt: point put: color.
			i := i + 3]].
	"
"
	flipHorizontalBmp := bmp clone flipHorizontally.
	width := bmp width.
	flipHorizontalBmp xyDo: [:x :y | 
		colorFlipped := flipHorizontalBmp colorAt: x @ y.
		color := bmp colorAt: width - x - 1 @ y.
		self assert: color = colorFlipped].
	"
"
	flipVerticalBmp := bmp clone flipVertically.
	height := bmp height.
	flipVerticalBmp xyDo: [:x :y | 
		colorFlipped := flipVerticalBmp colorAt: x @ y.
		color := bmp colorAt: x @ (height - 1 - y).
		self assert: color = colorFlipped]]

{ #category : #all }
GDIBitmapTest >> testSetPixelColor [
	| bmp i color colorGeting |
	VirtualScreen current bitsPerPixel < 24 ifTrue: [^self].
	bmp := (GDIBitmap extent: 7 @ 8) bitmap.
	i := 0.
	bmp pointsDo: [:point | 
		color := Color red: i green: i + 1 blue: i + 2.
		bmp colorAt: point put: color.
		colorGeting := bmp colorAt: point.
		self assert: color = colorGeting.
		self assert: color red = i.
		self assert: color green = (i + 1).
		self assert: color blue = (i + 2).
		i := i + 3]]

{ #category : #all }
GDIBitmapTest >> testTP35996 [
	| string bitmap |
	string := '00160016A

	bitmap := GDIBitmap fromString: string.
	self
		assert: 'Bitmap fromString: ' , string storeString = bitmap storeString]

{ #category : #clone }
GDIBitmapTest >> testTP36986 [
	| alpha image clone |
	alpha := (Bitmap named: 'Copy') asGDIBitmap.
	self precondition: alpha colors size > 1.
	image := GDIBitmap extent: alpha extent + 6 bitCount: 32.
	image beTransparent.
	alpha drawAt: 3 @ 3 on: image.
	clone := image clone.
	self assert: clone colors size > 1]

