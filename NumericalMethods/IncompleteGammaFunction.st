"
	Copyright (c) 2020 Aucerna.
	See (MIT) license in root directory.
"

Class {
	#name : #IncompleteGammaFunction,
	#superclass : #Object,
	#instVars : [
		'a',
		'epsilon',
		'iterations',
		'normalized',
		'gamma'
	],
	#category : #NumericalMethods
}

{ #category : #'instance creation' }
IncompleteGammaFunction class >> a: a [
	^self new a: a]

{ #category : #constants }
IncompleteGammaFunction class >> defaultEpsilon [
	^1.0e-10]

{ #category : #constants }
IncompleteGammaFunction class >> defaultIterations [
	^100]

{ #category : #initialization }
IncompleteGammaFunction class >> initialize [
	"
	IncompleteGammaFunction initialize
	"
	super initialize.
	self initializeConstants]

{ #category : #initialization }
IncompleteGammaFunction class >> initializeConstants [
	"
	IncompleteGammaFunction initializeConstants
	"
	IncompleteGammaMethods
		at: 'LowerIncomplete' put: 2;
		at: 'SmallUppder' put: 3;
		at: 'IncompleteUpper' put: 4]

{ #category : #'instance creation' }
IncompleteGammaFunction class >> license [
	^'Part of the IncompleteGammaFunction and IncompleteBetaFunction  implementations are  derivative work of Boost library. Here is its licence:
Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
']

{ #category : #'instance creation' }
IncompleteGammaFunction class >> new [
	^super new initialize]

{ #category : #'instance creation' }
IncompleteGammaFunction class >> normalizedA: a [
	^self new a: a; normalized: true]

{ #category : #accessing }
IncompleteGammaFunction >> a: aNumber [
	a := aNumber.
	gamma := IncompleteGammaPrefix new
		epsilon: epsilon;
		iterations: iterations;
		a: a]

{ #category : #services }
IncompleteGammaFunction >> at: z [
	^self at: z invert: false]

{ #category : #private }
IncompleteGammaFunction >> at: z invert: aBoolean [
	"
	(IncompleteGammaFunction a: 10.2) at: 0.3 invert: true.
	(IncompleteGammaFunction a: 10.2) at: 0.3 invert: false.
	"
	| method invert result gam |
	invert := aBoolean.
	z = 0.0 ifTrue: [^invert ifTrue: [self total: normalized] ifFalse: [0.0]].
	method := self calculationMethodFor: z.
	method = LowerIncomplete ifTrue: [
		result := self lowerSeries: z invert: invert.
		invert ifTrue: [invert := false]].
	method = SmallUppder ifTrue: [
		invert := invert not.
		result := self smallUpperPart: z.
		gam := self total: normalized not.
		result := result / gam].
	method = IncompleteUpper ifTrue: [
		invert := invert not.
		result := self incompleteUpper: z].
	invert ifTrue: [
		gam := self total: normalized.
		result := gam - result].
	^result]

{ #category : #private }
IncompleteGammaFunction >> calculationMethodFor: z [
	z < 0.5
		ifTrue: [^-0.4 / z ln < a ifTrue: [LowerIncomplete] ifFalse: [SmallUppder]].
	z < 1.1
		ifTrue: [^z * 0.75 < a ifTrue: [LowerIncomplete] ifFalse: [SmallUppder]].
	^z - (1.0 / (3.0 * z)) < a
		ifTrue: [LowerIncomplete]
		ifFalse: [IncompleteUpper]]

{ #category : #services }
IncompleteGammaFunction >> complementaryAt: z [
	^self at: z invert: true]

{ #category : #private }
IncompleteGammaFunction >> derivativeAt: z [
	| method prefix p gm |
	z = 0.0 ifTrue: [^0.0].
	method := self calculationMethodFor: z.
	^method = SmallUppder
		ifTrue: [
			p := (z raisedTo: a - 1) - 1.
			gm := IncompleteGammaFunction new
				epsilon: epsilon;
				iterations: iterations;
				trueGammaP1M1: a.
			p + 1 / (gm + 1 / a * z exp)]
		ifFalse: [
			prefix := self prefix: z.
			prefix / z]]

{ #category : #accessing }
IncompleteGammaFunction >> epsilon: aNumber [
	epsilon := aNumber]

{ #category : #services }
IncompleteGammaFunction >> factorialOf: anInteger [
	^ConvergentSeries factorialOf: anInteger]

{ #category : #private }
IncompleteGammaFunction >> incompleteUpper: z [
	| prefix fraction |
	prefix := self prefix: z.
	fraction := IncompleteUpperGammaContinuedFraction
		epsilon: epsilon
		iterations: iterations
		a: a
		x: z.
	^prefix * fraction value]

{ #category : #initialization }
IncompleteGammaFunction >> initialize [
	super initialize.
	normalized := false.
	epsilon := 1.0e-10.
	iterations := 100]

{ #category : #accessing }
IncompleteGammaFunction >> iterations: aNumber [
	iterations := aNumber]

{ #category : #private }
IncompleteGammaFunction >> lowerSeries: z invert: invert [
	| prefix series total a0 result |
	prefix := self prefix: z.
	series := LowerIncompleteGammaSeries
		epsilon: epsilon
		iterations: iterations
		a: a
		z: z.
	invert ifTrue: [
		total := self total: normalized.
		a0 := a negated * total / prefix.
		series initialValue: a0].
	result := prefix * series value.
	^invert ifTrue: [result negated] ifFalse: [result]]

{ #category : #initialization }
IncompleteGammaFunction >> normalized: aBoolean [
	normalized := aBoolean]

{ #category : #private }
IncompleteGammaFunction >> prefix: z [
	^normalized
		ifTrue: [gamma regularizedAt: z]
		ifFalse: [gamma fullAt: z]]

{ #category : #private }
IncompleteGammaFunction >> smallUpperPart: z [
	"
	(IncompleteGammaFunction a: 10.2) smallUpperPart: 0.3 570499.02784069
	(IncompleteGammaFunction a: 3.2) smallUpperPart: 0.3
	"
	| za result series |
	za := z raisedTo: a.
	result := (self trueGammaP1M1: a) - (za - 1).
	result := result / a.
	series := UpperIncompleteGammaSeries
		epsilon: epsilon
		iterations: iterations
		a: a
		z: z.
	^result - (za * series value)]

{ #category : #private }
IncompleteGammaFunction >> total: normed [
	^normed ifTrue: [1] ifFalse: [GammaFunction new valueAt: a]]

{ #category : #services }
IncompleteGammaFunction >> trueGamma: aNumber [
	"
	IncompleteGammaFunction trueGamma: 3.5
	"
	| prefix z phi sum f |
	prefix := 1.
	z := aNumber.
	[z < 6] whileTrue: [
		prefix := prefix / z.
		z := z + 1].
	z isInteger ifTrue: [
		f := self factorialOf: z - 1.
		^prefix * f].
	phi := z / Number e raisedTo: z.
	sum := self upperAndLowerSum: z.
	^sum * prefix * phi]

{ #category : #services }
IncompleteGammaFunction >> trueGamma: aNumber deltaRatio: delta [
	"
	computes Gamma(z)/Gamma(z + delta)
	IncompleteGammaFunction trueGamma: 3.5 deltaRatio: 4
	"
	| prefix z sum zd sumd |
	prefix := 1.
	z := aNumber.
	zd := z + delta.
	[zd < 6 and: [z < 6]] whileTrue: [
		prefix := prefix / z.
		prefix := prefix * zd.
		z := z + 1.
		zd := zd + 1].
	prefix := prefix * (z / zd raisedTo: z) * (Float e / zd raisedTo: delta).
	sum := self upperAndLowerSum: z.
	sumd := self upperAndLowerSum: zd.
	^prefix * (sum / sumd)]

{ #category : #services }
IncompleteGammaFunction >> trueGammaP1M1: dz [
	^(self trueGamma: 1 + dz) - 1]

{ #category : #services }
IncompleteGammaFunction >> upperAndLowerSum: aNumber [
	^self upperAndLowerSum: aNumber limit: aNumber]

{ #category : #services }
IncompleteGammaFunction >> upperAndLowerSum: aNumber limit: limt [
	| fraction series |
	fraction := IncompleteUpperGammaContinuedFraction
		epsilon: epsilon
		iterations: iterations
		a: aNumber
		x: limt.
	series := LowerIncompleteGammaSeries
		epsilon: epsilon
		iterations: iterations
		a: aNumber
		z: limt.
	^series value + fraction value]

